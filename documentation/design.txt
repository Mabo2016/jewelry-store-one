Sunday, 16-09-2018, 17:34
Hamade
Software design document. What Django models, templates, views, forms, model
forms, and such are to be created. Also, what each will contain and the tasks
it will be responsible for. Also, document other decisions like hacks, fixes,
configurations, and whatever else that does not normally fit in with the other
categories.

Requirements:
    View Own Account
    Reset Password

Design:
    View Own Account
        Data
            First name - CharField
            Last name - CharField
            Email address - EmailField
            Phone number - CharField
            Delivery address - CharField
                House/Block number
                Street
                District/Zone
                // City and country assumed to be Dubai, UAE.
        Templates (views)
            user_profile.html
        Views (controllers)
            user_profile_view.py
        Forms
            user_profile_form.py

Plan:
    View Own Account
        1. Modify the model to have phone number, and physical address.
        2. Modify signup process to account for phone number,
        and the delivery address.
        3. Sign in and sign out stay the same.
        4. user_profile_view.py & user_profile_form.py.
        5. user_profile.html


Jewelry browsing and searching
    1. Filtered content
        Implement one page, jewelry-list, where all the jewelry are listed.
        Allow the user to filter them, by category (e.g earrings or bracelets).
        Or by something else, like date added, price, or some combination.
    2. Fractioned content
        Create several pages, one for each jewelry category, bracelets, rings,
        earrings, and so on. And then allow filtering on each page for date
        added, price, and such.

    Pros:
        Filtered
            * Fewer pages
            * Less coding
            * Less navigation
            * Allows combination of various jewelry
            * Caters to users who are looking for very specific items, and for
            those who aren't
            *
        Fractioned
            * Clearly separated content
            * Clearly communicates the content
            * Perhaps easier with tabbing in a browser
            * Allows category-specific code
    Cons:
        Filtered
            * May cause trouble with tabbing in browsers
            * May make the site seem simplistic
            * May make the site seem lacking in content
        Fractioned
            * Extra code and files
            * May be unnecessary
            * If there are many categories the navigation bar and menu will be
            cluttered with various pages to visit.
            * Harder to extend or add content in the form of new categories.

    Decision
        Make it filtered. Then later on maybe implement a fractioned version
        of the site.

    Design:
        Filter on category, date added, price, metal/texture
        Categories:
            Earrings, rings, bracelets, necklaces, brooches, tiaras
        Metal/texture:
            Rose gold, gold, platinum, silver

    Code:
        templates:
            jewelry_list.html
            jewelry_detail.html
        views:
            jewelry_view.py
        models:
            jewelry

        data:
            jewelry
                name:           char field
                date_added:     date_time
                price:          decimal
                metal_used:     char field, list
                thumbnail:      image
                detail_images:  list of images
        gui:
            jewelry_list.html
                * Paginated list of jewelry items filtered by the user.
                * A filters bar to filter jewelry based on date added, price,
                category, and metal used
                * A main content area where rows of 5 columns are shown, each
                cell having one jewelry shown.
                * Each cell shows a thumbnail of the item, with its name, and
                price.
                * Pagination by 50 items
                * View in detail possible by clicking on an item.
            jewelry_detail.html
                All the details of the item shown on screen, except the
                thumbnail.
                Images at the top.
        views:
            list_jewelry
                takes in filtering data and returns a list of items according
                to the filters and pagination.
            detail_jewelry
                Just show the details of the item, except the thumbnail.

    My Cart
        Need a my cart page for the user
        accessible when logged in only
        An add to cart button should appear or look active if and when the user
        is logged in browsing jewelry
        My cart page should allow removal of items, and the alteration of the
        quantity of the items in the cart, without addition of new types of
        items. The latter is done in the jewelry page.
        Show the total price for all items in the cart.
        Show the total quantity of items in the cart.
        Show the price of each type of item in the cart.
        Show the quantity added of each type of item in the cart.
        Show the price x quantity of each type of item in the cart
        Show that the delivery will take a week from the time the order was
        placed.

    Place Order
        Place order button appears on the my cart page
        Inactive if there are no items in the cart
        Active if there is 1 or more items in the cart
        If button pressed then ask for confirmation from the user
        Also, if pressed, inform the user of how long the delivery will take,
        and the total price

    Design solutions:
        A separate template for my cart "my_cart.html".
        The page should show a table with all the user's items.
            My Cart Table's Columns:
                Item Name   Individual price    Quantity Added  Total Price
                string      decimal             integer         decimal

            A button that allows to alter the quantity added per type of
            item should be placed near the table or in the table.
            If not practical then this feature should be disallowed and the
            user will have to alter the quantity from without the page.
            Also, if not possible then the user should be allowed to
            delete the entire row of the table.

    Models
        Cart
            User: 1-to-1

        Order
            User: fk
            Jewelry: fk
            Payment Method
            Delivery Address
    Views (controllers/delegates)
        my_cart_view
        order_placement_view
    Templates (views)
        order_placement.html
        my_cart.html
    forms
        order_placement_form
        my_cart_form???

    User/Shopper always a cart object in db. When the shopper is logged in,
    he/she can add items to it. The items stay in the cart object until the
    shopper checks out (aka places and confirms an order) or until he/she
    signs out, or until he/she disconnects from the site.
    In such cases the cart is emptied.
    If the user places an order then:
        A new order object is created in the db for the user
        Its contents will be transferred from the cart object
        The cart object is cleared of all items
        The user is prompted to input delivery details like address
        The user is shown how long it takes for the delivery to happen
        The user is prompted to confirm the order
            If the shopper confirms it, then the order is updated with
            the delivery address.
            A confirmation of the order email is sent to the shopper's
            email address
            If the shopper rejects then the state is reverted to when the
            order was placed but not confirmed.
        The shopper is prompted to input/verify the email address
        The shopper is prompted to cancel or confirm the order
            If the shopper cancels the order it is deleted from the db,
            and the cart stays deleted and nothing is saved.

    Models
        Cart
            User: fk
            Date-time created; date-time
            // If is_ordered then delete this object
            is_ordered: boolean
    When user requests an item to be added to cart
        If cart does not exist for this user then
            Create a new cart for this user
        Create a new cart item
            Add a reference to the jewelry item in the cart item
            OR duplicate the jewelry item's details in the cart item
        added it to the cart
            Add a fk to the cart item linking it to the cart

    Cart
        Cart Items : Jewelry Items

    Order Placement
        When placing orders
            Prompt for confirmation
            Create order object
            Populate it with shopping cart items
                Foreach cart item create an order item
            Clear shopping cart
            Send email to shopper with details of order.
            Show the user the order.
        Order object
        order detail
        order list
